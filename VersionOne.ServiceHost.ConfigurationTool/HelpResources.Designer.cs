//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VersionOne.ServiceHost.ConfigurationTool {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class HelpResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal HelpResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("VersionOne.ServiceHost.ConfigurationTool.HelpResources", typeof(HelpResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User API Id is used to identify application working with Buy a Feature system and provided with the integration. You can change it in the configuration file only.
        /// </summary>
        internal static string BafApiId {
            get {
                return ResourceManager.GetString("BafApiId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom VersionOne numeric field assigned to Feature Group and containing the amount of Game Runs..
        /// </summary>
        internal static string BafFgGameRunCounterFieldName {
            get {
                return ResourceManager.GetString("BafFgGameRunCounterFieldName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This status indicates that Game corresponding to exported Feature Group was played.
        /// </summary>
        internal static string BafFgStatusCompleted {
            get {
                return ResourceManager.GetString("BafFgStatusCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom VersionOne list field assigned to Feature Group and containing statuses for integration with Buy a Feature system.
        /// </summary>
        internal static string BafFgStatusFieldName {
            get {
                return ResourceManager.GetString("BafFgStatusFieldName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This status appears when a Feature Group was successfully ported to Buy a Feature and corresponding Game Definition was created.
        /// </summary>
        internal static string BafFgStatusPorted {
            get {
                return ResourceManager.GetString("BafFgStatusPorted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This status is used to mark Feature Groups as ready to be ported to Buy a Feature.
        /// </summary>
        internal static string BafFgStatusReady {
            get {
                return ResourceManager.GetString("BafFgStatusReady", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If this option is checked, VersionOne workitems from sub-projects of selected project will also be processed by the service..
        /// </summary>
        internal static string BafIncludeChildProjects {
            get {
                return ResourceManager.GetString("BafIncludeChildProjects", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom VersionOne numeric field assigned to Story and containing the amount of Game Runs..
        /// </summary>
        internal static string BafItemGameRunCounterFieldName {
            get {
                return ResourceManager.GetString("BafItemGameRunCounterFieldName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom VersionOne numeric field assigned to Story and containing the number of times a corresponding game item has been purchased..
        /// </summary>
        internal static string BafItemPurchasedCounterFieldName {
            get {
                return ResourceManager.GetString("BafItemPurchasedCounterFieldName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom VersionOne list field assigned to Story and containing statuses for integration with Buy a Feature system.
        /// </summary>
        internal static string BafItemStatusFieldName {
            get {
                return ResourceManager.GetString("BafItemStatusFieldName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This status indicates that Game was played, and corresponding story was not purchased by players.
        /// </summary>
        internal static string BafItemStatusNotPurchased {
            get {
                return ResourceManager.GetString("BafItemStatusNotPurchased", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This status indicates that Story was successfully ported to Buy a Feature system, and corresponding Game Definition Item was created.
        /// </summary>
        internal static string BafItemStatusPorted {
            get {
                return ResourceManager.GetString("BafItemStatusPorted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This status means that Game was played, and corresponding Story was purchased by players.
        /// </summary>
        internal static string BafItemStatusPurchased {
            get {
                return ResourceManager.GetString("BafItemStatusPurchased", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This status is used to mark Stories ready to be ported to Buy a Feature system.
        /// </summary>
        internal static string BafItemStatusReady {
            get {
                return ResourceManager.GetString("BafItemStatusReady", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VersionOne Project.
        /// </summary>
        internal static string BafProject {
            get {
                return ResourceManager.GetString("BafProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Buy a Feature server URL.
        /// </summary>
        internal static string BafServerUrl {
            get {
                return ResourceManager.GetString("BafServerUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mappings of VersionOne T-Shirt Sizes to Buy a Feature Shirt Sizes.
        /// </summary>
        internal static string BafShirtSizeMappings {
            get {
                return ResourceManager.GetString("BafShirtSizeMappings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signing Key is used for data encryption. It is provided with the integration. You can change it in the configuration file only..
        /// </summary>
        internal static string BafSigningKey {
            get {
                return ResourceManager.GetString("BafSigningKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom VersionOne list field assigned to Story and containing T-Shirt sizes populated along with workitems to Buy a Feature system.
        /// </summary>
        internal static string BafVersionOneShirtSizeField {
            get {
                return ResourceManager.GetString("BafVersionOneShirtSizeField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the Bugzilla field to update when a VersionOne defect is closed. (optional).
        /// </summary>
        internal static string BugzillaCloseFieldId {
            get {
                return ResourceManager.GetString("BugzillaCloseFieldId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value to update the field to when VersionOne defect is closed. (optional).
        /// </summary>
        internal static string BugzillaCloseFieldValue {
            get {
                return ResourceManager.GetString("BugzillaCloseFieldValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User ID to assign bug to once it gets closed in VersionOne. (optional).
        /// </summary>
        internal static string BugzillaCloseReassignValue {
            get {
                return ResourceManager.GetString("BugzillaCloseReassignValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Status to resolve bug to once it gets closed in VersionOne. (optional).
        /// </summary>
        internal static string BugzillaCloseResolveValue {
            get {
                return ResourceManager.GetString("BugzillaCloseResolveValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the Bugzilla field to update when a VersionOne defect is created. (optional).
        /// </summary>
        internal static string BugzillaCreateFieldId {
            get {
                return ResourceManager.GetString("BugzillaCreateFieldId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value to update the field to when VersionOne defect is created. (optional).
        /// </summary>
        internal static string BugzillaCreateFieldValue {
            get {
                return ResourceManager.GetString("BugzillaCreateFieldValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User ID to assign bug to once it gets created in VersionOne. (optional).
        /// </summary>
        internal static string BugzillaCreateReassignValue {
            get {
                return ResourceManager.GetString("BugzillaCreateReassignValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Status to resolve bug to once it gets created in VersionOne..
        /// </summary>
        internal static string BugzillaCreateResolve {
            get {
                return ResourceManager.GetString("BugzillaCreateResolve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Issue priority mappings. 
        ///If a mapping of Bugzilla to VersionOne priority is omitted here, created VersionOne defects do not have any priority set. 
        ///In example configuration, Bugzilla priorities are valid for version 3.6..
        /// </summary>
        internal static string BugzillaPriorityMappings {
            get {
                return ResourceManager.GetString("BugzillaPriorityMappings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mapping for projects from Bugzilla to VersionOne. Note that projects not enlisted in mappings are matched by name, and if there&apos;s no match, default (root) VersionOne project is used. Usually, it is System (All Projects)..
        /// </summary>
        internal static string BugzillaProjectMappings {
            get {
                return ResourceManager.GetString("BugzillaProjectMappings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bugzilla Search that finds artifacts to move into VersionOne..
        /// </summary>
        internal static string BugzillaSearchName {
            get {
                return ResourceManager.GetString("BugzillaSearchName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VersionOne &apos;Source&apos; value to use when Defect was created from Bugzilla artifact. Make sure this value exists in VersionOne..
        /// </summary>
        internal static string BugzillaSource {
            get {
                return ResourceManager.GetString("BugzillaSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bugzilla URL used to query for defects.
        ///For Bugzilla 3.0.x the URL should include v1.cgi.
        ///For Bugzilla 3.2.x the URL should include xmlrpc.cgi..
        /// </summary>
        internal static string BugzillaUrl {
            get {
                return ResourceManager.GetString("BugzillaUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Links in VersionOne to Bugzilla Bug (we replace #key# with Bugzilla Issue ID)..
        /// </summary>
        internal static string BugzillaUrlTemplate {
            get {
                return ResourceManager.GetString("BugzillaUrlTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bugzilla custom field to use for VersionOne Defect URL..
        /// </summary>
        internal static string BugzillaV1LinkFieldId {
            get {
                return ResourceManager.GetString("BugzillaV1LinkFieldId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, the link between VersionOne and VCS is placed on the ChangeSet Details page tab menu. If cleared, there is no tab menu element for the link..
        /// </summary>
        internal static string ChangesetsAddToMenu {
            get {
                return ResourceManager.GetString("ChangesetsAddToMenu", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, a VersionOne ChangeSet is created for each version control system (VCS) ChangeSet. If cleared, the VersionOne ChangeSet is only created if a VersionOne identifier can be found in the VCS commit comment..
        /// </summary>
        internal static string ChangesetsAllwaysCreate {
            get {
                return ResourceManager.GetString("ChangesetsAllwaysCreate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VersionOne ChangeSet creation comment..
        /// </summary>
        internal static string ChangesetsComment {
            get {
                return ResourceManager.GetString("ChangesetsComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Friendly name for this link. Defaults to &quot;ChangeSet {0}&quot; and the {0} is replaced with the VCS ChangeSet Identifier..
        /// </summary>
        internal static string ChangesetsName {
            get {
                return ResourceManager.GetString("ChangesetsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fully qualified URL to your web based VCS  Viewer. The VCS ChangeSet identifier is set by putting {0} in the URL..
        /// </summary>
        internal static string ChangesetsUrl {
            get {
                return ResourceManager.GetString("ChangesetsUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClearQuest Action to perform when a Defect is closed in VersionOne..
        /// </summary>
        internal static string ClearQuestCloseAction {
            get {
                return ResourceManager.GetString("ClearQuestCloseAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClearQuest Connection Identifier..
        /// </summary>
        internal static string ClearQuestConnectionName {
            get {
                return ResourceManager.GetString("ClearQuestConnectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Database Name in the ClearQuest instance..
        /// </summary>
        internal static string ClearQuestDatabase {
            get {
                return ResourceManager.GetString("ClearQuestDatabase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the ClearQuest Field containing the entity title..
        /// </summary>
        internal static string ClearQuestDefectTitleField {
            get {
                return ResourceManager.GetString("ClearQuestDefectTitleField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the ClearQuest Field containing the entity description..
        /// </summary>
        internal static string ClearQuestDescriptionField {
            get {
                return ResourceManager.GetString("ClearQuestDescriptionField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the Defect entity in your ClearQuest instance..
        /// </summary>
        internal static string ClearQuestEntityType {
            get {
                return ResourceManager.GetString("ClearQuestEntityType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the ClearQuest Field used to uniquely identify the entity..
        /// </summary>
        internal static string ClearQuestIdField {
            get {
                return ResourceManager.GetString("ClearQuestIdField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Template used to create a link in VersionOne to the ClearQuest defect ( #key# is placeholder for ClearQuest defect id). For example:
        ///http://domain:port/cqweb/#/&lt;SchemaName&gt;/&lt;DataBase&gt;/RECORD/#defectid#&amp;format=HTML&amp;noframes=true&amp;recordType=Defect
        /// SchemaName - Schema name in the ClearQuest,
        /// DataBase   - Database name in the ClearQuest.
        /// </summary>
        internal static string ClearQuestIssueUrlTemplate {
            get {
                return ResourceManager.GetString("ClearQuestIssueUrlTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mandatory fields which need to be filled during changing state of defect to close..
        /// </summary>
        internal static string ClearQuestMandatoryFields {
            get {
                return ResourceManager.GetString("ClearQuestMandatoryFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the ClearQuest Action used to modify the entity..
        /// </summary>
        internal static string ClearQuestModifyAction {
            get {
                return ResourceManager.GetString("ClearQuestModifyAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the ClearQuest Field containing the entity owner..
        /// </summary>
        internal static string ClearQuestOwnerLoginField {
            get {
                return ResourceManager.GetString("ClearQuestOwnerLoginField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password for ClearQuest user..
        /// </summary>
        internal static string ClearQuestPassword {
            get {
                return ResourceManager.GetString("ClearQuestPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the ClearQuest Field containing the priority state..
        /// </summary>
        internal static string ClearQuestPriorityField {
            get {
                return ResourceManager.GetString("ClearQuestPriorityField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Issue priority mappings. 
        ///If a mapping of ClearQuest to VersionOne priority is omitted here, created VersionOne defects do not have any priority set..
        /// </summary>
        internal static string ClearQuestPriorityMappings {
            get {
                return ResourceManager.GetString("ClearQuestPriorityMappings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mapping for projects from ClearQuest to VersionOne..
        /// </summary>
        internal static string ClearQuestProjectMappings {
            get {
                return ResourceManager.GetString("ClearQuestProjectMappings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the ClearQuest Field containing the Project Name for this entity..
        /// </summary>
        internal static string ClearQuestProjectNameField {
            get {
                return ResourceManager.GetString("ClearQuestProjectNameField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the VersionOne Source to use for ClearQuest..
        /// </summary>
        internal static string ClearQuestSourceFieldValue {
            get {
                return ResourceManager.GetString("ClearQuestSourceFieldValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the ClearQuest Field containing the entity state..
        /// </summary>
        internal static string ClearQuestStateField {
            get {
                return ResourceManager.GetString("ClearQuestStateField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClearQuest Action to perform once a Defect is successfully created in VersionOne..
        /// </summary>
        internal static string ClearQuestSubmittedToV1Action {
            get {
                return ResourceManager.GetString("ClearQuestSubmittedToV1Action", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClearQuest State that indicates which Defects are in the VersionOne system..
        /// </summary>
        internal static string ClearQuestSubmittedToV1State {
            get {
                return ResourceManager.GetString("ClearQuestSubmittedToV1State", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Valid ClearQuest Username..
        /// </summary>
        internal static string ClearQuestUsername {
            get {
                return ResourceManager.GetString("ClearQuestUsername", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ClearQuest State that indicates which Defects are ready for delivery to VersionOne..
        /// </summary>
        internal static string ClearQuestWaitedSubmitToV1State {
            get {
                return ResourceManager.GetString("ClearQuestWaitedSubmitToV1State", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, configuration node is created, but service would not run..
        /// </summary>
        internal static string CommonDisabled {
            get {
                return ResourceManager.GetString("CommonDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The search string to match against the names of files in the folder..
        /// </summary>
        internal static string CommonFilter {
            get {
                return ResourceManager.GetString("CommonFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Time interval (in minutes) between two consequent requests for changes..
        /// </summary>
        internal static string CommonPollInterval {
            get {
                return ResourceManager.GetString("CommonPollInterval", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regular expression for extracting VersionOne asset ID.
        ///To Match S-01001 (Matches &quot;S-01001&quot;): [A-Z]{1,2}-[0-9]+
        ///To match #Reference (matches only &quot;Reference&quot;): (?&lt;=#)[a-zA-Z]+\b
        ///To match &quot;V1:Reference&quot;  (matches only &quot;Reference&quot;): (?&lt;=V1:)[a-zA-Z]+\b.
        /// </summary>
        internal static string CommonRegularExpression {
            get {
                return ResourceManager.GetString("CommonRegularExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Folder for tracking changes..
        /// </summary>
        internal static string CommonWatch {
            get {
                return ResourceManager.GetString("CommonWatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the JIRA user to assign the Issue once it&apos;s closed in VersionOne. A value of -1 will cause JIRA to set the assignee based on workflow rules. (optional).
        /// </summary>
        internal static string JiraAssigneeStateChanged {
            get {
                return ResourceManager.GetString("JiraAssigneeStateChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the JIRA custom field to update after a the VersionOne Defect is closed..
        /// </summary>
        internal static string JiraCloseFieldId {
            get {
                return ResourceManager.GetString("JiraCloseFieldId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value to set in &quot;Closed Field ID&quot; after a the VersionOne Defect is closed..
        /// </summary>
        internal static string JiraCloseFieldValue {
            get {
                return ResourceManager.GetString("JiraCloseFieldValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the JIRA Custom Field to update after a Defect is created in VersionOne..
        /// </summary>
        internal static string JiraCreateFieldId {
            get {
                return ResourceManager.GetString("JiraCreateFieldId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value to set in &quot;Create Field ID&quot; after a Defect is created in VersionOne..
        /// </summary>
        internal static string JiraCreateFieldValue {
            get {
                return ResourceManager.GetString("JiraCreateFieldValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, the integration will not use this filter to find JIRA issues..
        /// </summary>
        internal static string JiraFilterDisabled {
            get {
                return ResourceManager.GetString("JiraFilterDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ID of the filter used to find JIRA issues that need to have VersionOne assets created..
        /// </summary>
        internal static string JiraFilterId {
            get {
                return ResourceManager.GetString("JiraFilterId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Template used to create a link in VersionOne to the JIRA issue ( #key# is placeholder for JIRA Issue id)..
        /// </summary>
        internal static string JiraIssueUrlTemplate {
            get {
                return ResourceManager.GetString("JiraIssueUrlTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mapping for priorities from JIRA to VersionOne.
        ///If a mapping of JIRA to VersionOne priority is omitted here, created VersionOne defects do not have any priority set..
        /// </summary>
        internal static string JiraPriorityMappings {
            get {
                return ResourceManager.GetString("JiraPriorityMappings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The JIRA Workflow Transition ID to set once the Defect has been created in VersionOne..
        /// </summary>
        internal static string JiraProgressWorkflow {
            get {
                return ResourceManager.GetString("JiraProgressWorkflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The JIRA Workflow Transition ID to set once the Defect is closed in VersionOne..
        /// </summary>
        internal static string JiraProgressWorkflowClosed {
            get {
                return ResourceManager.GetString("JiraProgressWorkflowClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mapping for projects from JIRA to VersionOne..
        /// </summary>
        internal static string JiraProjectMappings {
            get {
                return ResourceManager.GetString("JiraProjectMappings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the VersionOne Source to use for JIRA..
        /// </summary>
        internal static string JiraSourceFieldValue {
            get {
                return ResourceManager.GetString("JiraSourceFieldValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom Field in JIRA used to hold VersionOne URL (this information also appears in the comment)..
        /// </summary>
        internal static string JiraWorkitemLinkFieldId {
            get {
                return ResourceManager.GetString("JiraWorkitemLinkFieldId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your LeanKitKanban account name..
        /// </summary>
        internal static string LkkAccount {
            get {
                return ResourceManager.GetString("LkkAccount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Primary workitem status will be set to this value when closing items matching to archived cards..
        /// </summary>
        internal static string LkkCloseStatus {
            get {
                return ResourceManager.GetString("LkkCloseStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If checked, cards will be created in LKK regardless of whether lane limit is exceeded..
        /// </summary>
        internal static string LkkOverrideWipLimit {
            get {
                return ResourceManager.GetString("LkkOverrideWipLimit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you choose to override WIP limit, you have to provide the reason in this field..
        /// </summary>
        internal static string LkkOverrideWipLimitComment {
            get {
                return ResourceManager.GetString("LkkOverrideWipLimitComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workitem priority mappings. If you provide non-existing LKK priority IDs, the integration would not be able to create cards..
        /// </summary>
        internal static string LkkPriorityMappings {
            get {
                return ResourceManager.GetString("LkkPriorityMappings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mappings of VersionOne projects to LKK boards. Data creation and updates are done according to these mappings..
        /// </summary>
        internal static string LkkProjectMappings {
            get {
                return ResourceManager.GetString("LkkProjectMappings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mappings of VersionOne workitem types to LKK card types. Non existing LKK card types will be created on each mapped board on service startup..
        /// </summary>
        internal static string LkkTypeMappings {
            get {
                return ResourceManager.GetString("LkkTypeMappings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Status that VersionOne workitems are updated with, if mapped to LK cards on Board lanes. If value does not exist in VersionOne, it will be created..
        /// </summary>
        internal static string LkkV1LeanKitActiveStatus {
            get {
                return ResourceManager.GetString("LkkV1LeanKitActiveStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Status that VersionOne workitems are updated with, if mapped to LK cards in Archive. If value does not exist in VersionOne, it will be created..
        /// </summary>
        internal static string LkkV1LeanKitArchivedStatus {
            get {
                return ResourceManager.GetString("LkkV1LeanKitArchivedStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Status that VersionOne workitems are updated with, if mapped to LK cards in Backlog. If value does not exist in VersionOne, it will be created..
        /// </summary>
        internal static string LkkV1LeanKitBacklogStatus {
            get {
                return ResourceManager.GetString("LkkV1LeanKitBacklogStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fully qualified URL to the Perforce repository monitored by this integration instance.
        ///Don&apos;t forget about port (default is 1666)..
        /// </summary>
        internal static string PerforcePath {
            get {
                return ResourceManager.GetString("PerforcePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Depot folder for tracking changes. For entire repository use //Depot/....
        /// </summary>
        internal static string PerforceView {
            get {
                return ResourceManager.GetString("PerforceView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the Quality Center Defect status value to set after the VersionOne Defect is closed..
        /// </summary>
        internal static string QcCloseStatusValue {
            get {
                return ResourceManager.GetString("QcCloseStatusValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the Quality Center Defect status value to set after a Defect is created in VersionOne..
        /// </summary>
        internal static string QcCreateStatusValue {
            get {
                return ResourceManager.GetString("QcCreateStatusValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Search criteria to find Quality Center defects to be moved into VersionOne..
        /// </summary>
        internal static string QcDefectFilters {
            get {
                return ResourceManager.GetString("QcDefectFilters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mapping for priorities from Quality Center to VersionOne.
        ///If a mapping of Quality Center to VersionOne priority is omitted here, created VersionOne defects do not have any priority set..
        /// </summary>
        internal static string QcPriorityMappings {
            get {
                return ResourceManager.GetString("QcPriorityMappings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mapping for projects from Quality Center to VersionOne..
        /// </summary>
        internal static string QcProjectMappings {
            get {
                return ResourceManager.GetString("QcProjectMappings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the VersionOne Source to use for Quality Center..
        /// </summary>
        internal static string QcSourceFieldValue {
            get {
                return ResourceManager.GetString("QcSourceFieldValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VersionOne test suite name..
        /// </summary>
        internal static string QtpSuiteName {
            get {
                return ResourceManager.GetString("QtpSuiteName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fully qualified URL to the Subversion repository monitored by this integration instance..
        /// </summary>
        internal static string SvnPath {
            get {
                return ResourceManager.GetString("SvnPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Test Complete Project Suite file..
        /// </summary>
        internal static string TcProjectSuiteConfig {
            get {
                return ResourceManager.GetString("TcProjectSuiteConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of times to retry when an error occurs before stopping..
        /// </summary>
        internal static string TcRetryAttempts {
            get {
                return ResourceManager.GetString("TcRetryAttempts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How long to wait if the integration encounters an error when attempting to read test result files. This can occur if TestComplete is writing results when the integration polls to read results..
        /// </summary>
        internal static string TcRetryTimeoutSeconds {
            get {
                return ResourceManager.GetString("TcRetryTimeoutSeconds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comment to use when setting values on VersionOne tests..
        /// </summary>
        internal static string TestsComment {
            get {
                return ResourceManager.GetString("TestsComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates whether the TestWriterService should create defects when automated tests fail for closed tests in VersionOne. Valid values are:
        ///* All: The integration will create a VersionOne Defect for any closed test in the project when the external system test fails;
        ///* Current Iteration: The integration will only create VersionOne Defects for closed tests within the current iteration;
        ///* None: The integration never create VersionOne defects..
        /// </summary>
        internal static string TestsCreateDefect {
            get {
                return ResourceManager.GetString("TestsCreateDefect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you are creating Defects, this text will appear in the description field..
        /// </summary>
        internal static string TestsDescription {
            get {
                return ResourceManager.GetString("TestsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Base filter used when selecting tests to push to partner system. This filter must include the attribute defined in TestReferenceAttribute..
        /// </summary>
        internal static string TestServicesBaseQueryFilter {
            get {
                return ResourceManager.GetString("TestServicesBaseQueryFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This table describes the attributes on each VersionOne Project element. These elements are child elements to TestPublishProjectMap and describe the VersionOne project to poll when looking for Test that need to be created in Quality Center..
        /// </summary>
        internal static string TestServicesV1Project {
            get {
                return ResourceManager.GetString("TestServicesV1Project", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value to set when a test fails..
        /// </summary>
        internal static string TestsFailedStatus {
            get {
                return ResourceManager.GetString("TestsFailedStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value to set when a test passes..
        /// </summary>
        internal static string TestsPassedStatus {
            get {
                return ResourceManager.GetString("TestsPassedStatus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VersionOne Field name to search for test identifier. It&apos;s recommended that you use the Reference field; however if you are already using this field for another purpose, you may choose another text field, including custom fields..
        /// </summary>
        internal static string TestsReference {
            get {
                return ResourceManager.GetString("TestsReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VersionOne field which contains card workflow status..
        /// </summary>
        internal static string V1LkkWorkflowFieldName {
            get {
                return ResourceManager.GetString("V1LkkWorkflowFieldName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabling proxy server affects VersionOne communication. Be sure to enable it if server is not accessible directly..
        /// </summary>
        internal static string V1PageProxyEnabled {
            get {
                return ResourceManager.GetString("V1PageProxyEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VersionOne server URL..
        /// </summary>
        internal static string V1PageVersionOneUrl {
            get {
                return ResourceManager.GetString("V1PageVersionOneUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VersionOne Workitem field used to hold defect system issue  ID. By default this is the Reference field..
        /// </summary>
        internal static string WorkitemsReference {
            get {
                return ResourceManager.GetString("WorkitemsReference", resourceCulture);
            }
        }
    }
}
